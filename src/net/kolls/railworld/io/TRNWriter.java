package net.kolls.railworld.io;

/*
 * Copyright (C) 2010 Steve Kollmansberger
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


import net.kolls.railworld.*;
import net.kolls.railworld.car.*;


import java.io.*;



/**
 * Writes Yard Duty TRN files
 * 
 * 
 * @author Steve Kollmansberger
 */
public class TRNWriter {

	static final int SWITCHER = 1; // engine
	static final int CABOOSE = 3;
	static final int PASSENGER = 4;
	static final int AUTORACK = 7;
	static final int BOXCAR = 9;
	static final int TANKCAR = 12;
	static final int OPENHOPPER = 14;
	static final int CENTERBEAM = 18;
	static final int INTERMODAL = 19;
	static final int STOCKCAR = 20;
	static final int COVEREDHOPPER = 24;
	
	private static int carType(Car c) {
		
		if (c instanceof Autorack) return AUTORACK;
		if (c instanceof Boxcar) return BOXCAR;
		if (c instanceof Caboose) return CABOOSE;
		if (c instanceof Coveredhopper) return COVEREDHOPPER;
		if (c instanceof Flatcar) return CENTERBEAM;
		if (c instanceof Intermodal) return INTERMODAL;
		if (c instanceof Openhopper) return OPENHOPPER;
		if (c instanceof Passenger) return PASSENGER;
		if (c instanceof Stockcar) return STOCKCAR;
		if (c instanceof Tankcar) return TANKCAR;
		if (c.isEngine()) return SWITCHER;
			
		System.out.println("Unknown car type");
		return BOXCAR;
	}
	
	private static BufferedWriter bw;
	
	private static void nl() throws IOException {
		bw.write("\r\n");
	}
	
	private static void writeLine(String s) throws IOException {
		bw.write(s);
		nl();
		
	}
	
	/**
	 * Create a Yard Duty train file from a given train.
	 * 
	 * @param f The file to write to
	 * @param t The train to write.
	 * @throws IOException
	 */
	public static void write(File f, Train t) throws IOException {
		
		bw = new BufferedWriter(new FileWriter(f));
		
		writeLine("[TrainNumber=0]");
		writeLine("TrainName=Anonymous");
		writeLine("TrainDesc=Generated by Rail World");
		writeLine("TrainCreator=Rail World");
		writeLine("UseExit=1");
		writeLine("Speed=" + (int)(t.vel()) + ":0");
		writeLine("ThrottleSetting=" + t.getThrottle());
		writeLine("BrakeSetting=" + (t.getBrake() ? "8" : "0"));
		
		
		
		for (int i = 0; i < t.array().length; i++) {
			nl();
			writeLine("[CarID=" + (i+1) + "]");
			writeLine("CarID=" + (i+1));
			writeLine("CarName=");
			Car c = t.array()[i];
			if (c.isEngine()) {
				writeLine("TypeGroup=E:4400:70:400000");
				writeLine("TypeID=1:&HAFAFAF:&HA00000:&H80FFFF");
			} else if (c instanceof Caboose) {
				writeLine("TypeGroup=C");
				writeLine("TypeID=3:&H2B07CD:&HFFFFFF:&HFFFFFF");
			} else {
				writeLine("TypeGroup=F");
				writeLine("TypeID=" + carType(c));
			}
			
			
			
			writeLine("DestinationID=1000:0:0");
			writeLine("Originator=Rail World");
			writeLine("EmailAddress=");
			
			
			if (c.isLoadable()) {
				if (c.loaded()) writeLine("IsLoaded=7"); else writeLine("IsLoaded=6");
			} else {
				writeLine("IsLoaded=6");
			}
		}
		
		nl();
		nl();
		nl();
		nl();
		bw.close();
		
		/*
		[CarID=1]
		 CarID=1
		 CarName=ICG 6828
		 TypeGroup=F
		 TypeID=11
		 DestinationID=1089:0:10
		 Originator=KingJPW
		 EmailAddress=
		 IsLoaded=7
		 */

	}
	
}
